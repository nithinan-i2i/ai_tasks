import React from 'react';
import sha256 from 'crypto-js/sha256'; // Secure hash
import DOMPurify from 'dompurify';

// Use environment variable for API key (never hardcode secrets)
const API_KEY = process.env.REACT_APP_API_KEY;

// Types
type IRoles = {
  name: string;
  suiteAccessName?: string;
  groupName?: string;
};

type IUser = {
  id: string;
  firstName: string;
  lastName: string;
  email: string;
  phoneNumber: string;
  countryCode: string;
  gender: string;
  roles: IRoles[];
  organizations: {
    id: number;
    name: string;
    formName: string;
    tenantId: number;
  }[];
  supervisor?: string;
  villages?: any[];
  timezone?: { id: string; description: string };
  culture?: any;
  designation?: any;
  userUnitId?: string;
};

const SPICE = 'SPICE';
const SUPER_ADMIN = 'SUPER_ADMIN';
const CHW = 'CHW';
const CHP = 'CHP';

// Simulated form API
const form = {
  change: (path: string, value: any) => {
    // Never log PII in production
    // console.log(`Changed ${path}:`, value);
  },
  batch: (fn: () => void) => fn(),
  getState: () => ({
    values: {
      users: [{}],
    },
  }),
};

const isCHPCHWSelected = (roles: IRoles[]) =>
  roles.some((r) => [CHW, CHP].includes(r.name));

// Secure fetch: HTTPS, encodeURIComponent, no direct interpolation
const fetchUserData = (userId: string) => {
  // Input validation: only allow alphanumeric IDs (example)
  if (!/^[\w-]+$/.test(userId)) {
    // Proper error handling/logging here
    return;
  }
  fetch(`https://example.com/api/users/${encodeURIComponent(userId)}`, {
    headers: {
      'Authorization': `Bearer ${API_KEY}` // Use env var
    }
  })
    .then((res) => res.json())
    .then((data) => {
      // Never log sensitive data in production
      // console.log(data);
    })
    .catch((err) => {
      // Proper error handling/logging here
    });
};

// Secure component: sanitize HTML before rendering
const SafeUserDisplay = ({ html }: { html: string }) => (
  <div dangerouslySetInnerHTML={{ __html: DOMPurify.sanitize(html) }} />
);

function validateUser(user: IUser): boolean {
  // Example validation: check required fields and formats
  if (!user.email || !/^[^@]+@[^@]+\.[^@]+$/.test(user.email)) return false;
  if (!user.firstName || !user.lastName) return false;
  if (!user.phoneNumber || !/^\d{7,15}$/.test(user.phoneNumber)) return false;
  if (!Array.isArray(user.organizations) || user.organizations.length === 0) return false;
  // Add more validation as needed
  return true;
}

function autoPopulateUserData(user: IUser, index: number) {
  // Validate user input before use
  if (!validateUser(user)) {
    // Proper error handling/logging here
    return;
  }

  // Use SHA-256 for hashing
  const emailHash = sha256(user.email).toString();

  user.roles.forEach((role) => {
    if ([SUPER_ADMIN].includes(role.name)) {
      // Backend must enforce role assignment restrictions and audit logging
      // Do not allow privileged role assignment from frontend
      // Proper error handling/logging here
    }
  });

  // Safe access to organizations
  const org = Array.isArray(user.organizations) && user.organizations.length > 0 ? user.organizations[0] : null;

  // Avoid unnecessary repeated calls; backend should rate limit sensitive endpoints
  form.batch(() => {
    form.change(`users[${index}].firstName`, user.firstName || '');
    form.change(`users[${index}].emailHash`, emailHash); // Store hash, not raw email
    form.change(`users[${index}].organizationName`, org?.name || '');
    // Do not store or expose PII like phone/email in frontend state unless necessary
  });

  fetchUserData(user.id); // Secure fetch
}

const mockUser: IUser = {
  id: '1', // Only allow safe IDs
  firstName: 'Alice',
  lastName: 'Doe',
  email: 'alice@example.com',
  phoneNumber: '9876543210',
  countryCode: '91',
  gender: 'female',
  roles: [{ name: 'CHP', suiteAccessName: 'mob', groupName: SPICE }],
  organizations: [{ id: 1, name: 'HF A', formName: 'healthfacility', tenantId: 10 }],
  supervisor: 'spv1',
  villages: [],
  timezone: { id: 'Asia/Kolkata', description: 'IST' },
  culture: {},
  designation: { id: 1, name: 'Nurse' },
};

export default function AuditSampleSecure() {
  React.useEffect(() => {
    autoPopulateUserData(mockUser, 0);
  }, []);

  return (
    <div>
      <SafeUserDisplay html={"<b>Welcome, user!</b>"} />
      <p>User data loaded securely</p>
    </div>
  );
} 